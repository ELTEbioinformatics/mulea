% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RankedBasedTest.R
\docType{class}
\name{gsea-class}
\alias{gsea-class}
\alias{gsea}
\alias{run_test,gsea-method}
\title{Gene Set Enrichment Analysis (GSEA)}
\usage{
\S4method{run_test}{gsea}(model)
}
\arguments{
\item{model}{Object of S4 class representing the mulea test.}
}
\value{
GSEA object. This object represents ranked based tests.

run_test method for GSEA object. Returns results of
the enrichment analysis.
}
\description{
An S4 class to represent a ranked based tests in mulea.
}
\section{Methods (by generic)}{
\itemize{
\item \code{run_test(gsea)}: runs test calculations.

}}
\section{Slots}{

\describe{
\item{\code{gmt}}{A data.frame representing the GMT representation of a model.}

\item{\code{element_names}}{A vector of elements names to include in the analysis,
ordered by their scores.}

\item{\code{element_scores}}{A vector of element_scores per element_names.}

\item{\code{gsea_power}}{A power of weight. Default value is 1.}

\item{\code{element_score_type}}{Defines the GSEA score type. Only positive
element_scores - "pos", only negative element_scores - "neg" and mixed
(standard) - "std".}

\item{\code{number_of_permutations}}{The number of permutations used in KS test.
Default value is 1000.}

\item{\code{test}}{character}
}}

\examples{
library(mulea)
library(tidyverse)
geo2r_result_tab <- read_tsv(file = system.file(package="mulea", "extdata", "GSE55662.table_wt_non_vs_cipro.tsv"))
geo2r_result_tab \%<>\% 
# extracting the first gene symbol from the Gene.symbol column
mutate(Gene.symbol = str_remove(string = Gene.symbol,
                                pattern = "\\\\/.*")) \%>\% 
 # removing rows where Gene.symbol is NA
 filter(!is.na(Gene.symbol)) \%>\% 
 # ordering by logFC
 arrange(desc(logFC))
 
 sign_genes <- geo2r_result_tab \%>\% 
# filtering for adjusted p-value < 0.05 and logFC > 1
filter(adj.P.Val < 0.05 & logFC > 1) \%>\% 
 # selecting the Gene.symbol column
 select(Gene.symbol) \%>\% 
 # converting the tibble to a vector
 pull() \%>\% 
 # removing duplicates
 unique()
 
 background_genes <- geo2r_result_tab \%>\% 
# selecting the Gene.symbol column
select(Gene.symbol) \%>\% 
 # convertin the tibble to a vector
 pull() \%>\% 
 # removing duplicates
 unique()
 
tf_gmt <- read_gmt(file = system.file(package="mulea", "extdata", "Transcription_factor_RegulonDB_Escherichia_coli_GeneSymbol.gmt"))
tf_gmt_filtered <- filter_ontology(gmt = tf_gmt,
                          min_nr_of_elements = 3,
                          max_nr_of_elements = 400)
# creating the GSEA model using the GMT variable
gsea_model <- gsea(gmt = tf_gmt_filtered,
                   # the names of elements to test
                   element_names = geo2r_result_tab_filtered$Gene.symbol,
                   # the logFC-s of elements to test
                   element_scores = geo2r_result_tab_filtered$logFC,
                   # consider elements having positive logFC values only
                   element_score_type = "pos",
                   # the number of permutations
                   number_of_permutations = 10000)
#' library(mulea)
library(tidyverse)
geo2r_result_tab <- read_tsv(file = system.file(package="mulea", "extdata", "GSE55662.table_wt_non_vs_cipro.tsv"))
geo2r_result_tab \%<>\% 
# extracting the first gene symbol from the Gene.symbol column
mutate(Gene.symbol = str_remove(string = Gene.symbol,
                                pattern = "\\\\/.*")) \%>\% 
 # removing rows where Gene.symbol is NA
 filter(!is.na(Gene.symbol)) \%>\% 
 # ordering by logFC
 arrange(desc(logFC))
 
 sign_genes <- geo2r_result_tab \%>\% 
# filtering for adjusted p-value < 0.05 and logFC > 1
filter(adj.P.Val < 0.05 & logFC > 1) \%>\% 
 # selecting the Gene.symbol column
 select(Gene.symbol) \%>\% 
 # converting the tibble to a vector
 pull() \%>\% 
 # removing duplicates
 unique()
 
 background_genes <- geo2r_result_tab \%>\% 
# selecting the Gene.symbol column
select(Gene.symbol) \%>\% 
 # convertin the tibble to a vector
 pull() \%>\% 
 # removing duplicates
 unique()
 
tf_gmt <- read_gmt(file = system.file(package="mulea", "extdata", "Transcription_factor_RegulonDB_Escherichia_coli_GeneSymbol.gmt"))
tf_gmt_filtered <- filter_ontology(gmt = tf_gmt,
                          min_nr_of_elements = 3,
                          max_nr_of_elements = 400)
# creating the GSEA model using the GMT variable
gsea_model <- gsea(gmt = tf_gmt_filtered,
                   # the names of elements to test
                   element_names = geo2r_result_tab_filtered$Gene.symbol,
                   # the logFC-s of elements to test
                   element_scores = geo2r_result_tab_filtered$logFC,
                   # consider elements having positive logFC values only
                   element_score_type = "pos",
                   # the number of permutations
                   number_of_permutations = 10000)
                   
                   # running the GSEA
gsea_results <- run_test(gsea_model)
}
