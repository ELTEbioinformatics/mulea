% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Plotting.R
\name{reshape_results}
\alias{reshape_results}
\title{Reshape Results}
\usage{
reshape_results(
  model = NULL,
  model_results = NULL,
  model_ontology_col_name = "ontology_id",
  ontology_id_colname = "ontology_id",
  p_value_type_colname = "eFDR",
  p_value_max_threshold = TRUE
)
}
\arguments{
\item{model}{a mulea model, created e.g. by ora().}

\item{model_results}{Results from model, returned by run_test().}

\item{model_ontology_col_name}{Character, specifies the column name in the model that contains ontology IDs. It defines which column in the model should be used for matching ontology IDs.}

\item{ontology_id_colname}{Character, specifies the column name for ontology IDs in the model results. It indicates which column in the model results contains ontology IDs for merging.}

\item{p_value_type_colname}{Character, specifies the column name for p-value types in the model results. It identifies the column containing p-values associated with ontology categories.}

\item{p_value_max_threshold}{Logical, indicating whether to apply a p-value threshold when filtering the resulting data. If TRUE, the function filters the data based on a p-value threshold.}
}
\value{
Return detailed and relaxed datatable where model and results are
merged for plotting purposes.
}
\description{
This function takes a model and model_results data, 
reshapes them into a suitable format for plotting, 
and returns the resulting data frame, which can be used 
for further analysis or visualization.
}
\examples{
library(mulea)
library(tidyverse)
geo2r_result_tab <- read_tsv("GSE55662.table_wt_non_vs_cipro.tsv")
geo2r_result_tab \%<>\% 
# extracting the first gene symbol from the Gene.symbol column
mutate(Gene.symbol = str_remove(string = Gene.symbol,
                                pattern = "\\\\/.*")) \%>\% 
 # removing rows where Gene.symbol is NA
 filter(!is.na(Gene.symbol)) \%>\% 
 # ordering by logFC
 arrange(desc(logFC))
 
 sign_genes <- geo2r_result_tab \%>\% 
# filtering for adjusted p-value < 0.05 and logFC > 1
filter(adj.P.Val < 0.05 & logFC > 1) \%>\% 
 # selecting the Gene.symbol column
 select(Gene.symbol) \%>\% 
 # converting the tibble to a vector
 pull() \%>\% 
 # removing duplicates
 unique()
 
 background_genes <- geo2r_result_tab \%>\% 
# selecting the Gene.symbol column
select(Gene.symbol) \%>\% 
 # convertin the tibble to a vector
 pull() \%>\% 
 # removing duplicates
 unique()
 
tf_gmt <- read_gmt("Transcription_factor_RegulonDB_Escherichia_coli_GeneSymbol.gmt")
tf_gmt_filtered <- filter_ontology(gmt = tf_gmt,
                          min_nr_of_elements = 3,
                          max_nr_of_elements = 400)

# creating the ORA model using the GMT variable
ora_model <- ora(gmt = tf_gmt_filtered, 
                # the test set variable
                element_names = sign_genes, 
                # the background set variable
                background_element_names = background_genes, 
                # the p-value adjustment method
                p_value_adjustment_method = "eFDR", 
                # the number of permutations
                number_of_permutations = 10000,
                # the number of processor threads to use
                
# running the ORA
ora_results <- run_test(ora_model)
# reshape results for visualisation
ora_reshaped_results <- reshape_results(model = ora_model, 
                                        model_results = ora_results, 
                                        # choosing which column to use for the
                                        # indication of significance
                                        p_value_type_colname = "eFDR")
}
\seealso{
\code{\link{plot_graph}}, \code{\link{plot_barplot}},
\code{\link{plot_heatmap}}
}
